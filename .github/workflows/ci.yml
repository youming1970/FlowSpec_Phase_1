name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: 测试
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 缓存 Go 模块
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: 下载依赖
      run: go mod download

    - name: 验证依赖
      run: go mod verify

    - name: 运行测试
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: 生成覆盖率报告
      run: go tool cover -html=coverage.out -o coverage.html

    - name: 上传覆盖率报告
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

    - name: 检查测试覆盖率
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "当前测试覆盖率: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ 测试覆盖率 ${COVERAGE}% 低于要求的 80%"
          exit 1
        else
          echo "✅ 测试覆盖率 ${COVERAGE}% 符合要求"
        fi

  lint:
    name: 代码检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 运行 golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

    - name: 运行 go vet
      run: go vet ./...

    - name: 检查代码格式
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ 以下文件需要格式化:"
          gofmt -s -l .
          exit 1
        else
          echo "✅ 代码格式检查通过"
        fi

  build:
    name: 构建
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 构建二进制文件
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        BINARY_NAME=flowspec-cli
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        mkdir -p build
        go build -ldflags="-s -w" -o build/${BINARY_NAME}-${GOOS}-${GOARCH} ./cmd/flowspec-cli
        
        # 验证二进制文件
        if [ "$GOOS" = "linux" ] && [ "$GOARCH" = "amd64" ]; then
          ./build/${BINARY_NAME}-${GOOS}-${GOARCH} --version
        fi

    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/

  integration-test:
    name: 集成测试
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 下载构建产物
      uses: actions/download-artifact@v3
      with:
        name: binaries-linux-amd64
        path: build/

    - name: 设置权限
      run: chmod +x build/flowspec-cli-linux-amd64

    - name: 运行基本功能测试
      run: |
        # 测试帮助命令
        ./build/flowspec-cli-linux-amd64 --help
        ./build/flowspec-cli-linux-amd64 align --help
        
        # 测试版本命令
        ./build/flowspec-cli-linux-amd64 --version
        
        echo "✅ 基本功能测试通过"

    - name: 创建测试数据
      run: |
        mkdir -p testdata
        echo '{"test": "data"}' > testdata/test-trace.json
        echo 'package main; func main() {}' > testdata/test.go

    - name: 运行集成测试
      run: |
        # 测试基本对齐命令（预期会显示开发中消息）
        ./build/flowspec-cli-linux-amd64 align --path=testdata --trace=testdata/test-trace.json --output=human
        
        # 测试JSON输出格式
        ./build/flowspec-cli-linux-amd64 align --path=testdata --trace=testdata/test-trace.json --output=json
        
        echo "✅ 集成测试通过"