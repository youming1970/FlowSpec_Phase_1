name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.21'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        go mod download
        go mod tidy
    
    - name: Set version from tag
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Set version from input
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
    
    - name: Run tests
      run: make test
    
    - name: Run code quality checks
      run: |
        make fmt
        make vet
        # Skip lint for now if golangci-lint is not available
        make lint || echo "Lint check skipped"
    
    - name: Generate coverage report
      run: make coverage
    
    - name: Build release binaries
      run: make build-all VERSION=${{ env.VERSION }}
    
    - name: Create release packages
      run: make package VERSION=${{ env.VERSION }}
    
    - name: Generate checksums
      run: |
        cd build/packages
        sha256sum *.tar.gz > checksums.txt
        cat checksums.txt
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: FlowSpec CLI v${{ env.VERSION }}
        body: |
          ## FlowSpec CLI v${{ env.VERSION }}
          
          ### 🎉 新版本发布
          
          这是 FlowSpec CLI 的 v${{ env.VERSION }} 版本发布。
          
          ### 📦 下载
          
          选择适合您平台的二进制文件：
          
          - **Linux AMD64**: `flowspec-cli-${{ env.VERSION }}-linux-amd64.tar.gz`
          - **Linux ARM64**: `flowspec-cli-${{ env.VERSION }}-linux-arm64.tar.gz`
          - **macOS AMD64**: `flowspec-cli-${{ env.VERSION }}-darwin-amd64.tar.gz`
          - **macOS ARM64**: `flowspec-cli-${{ env.VERSION }}-darwin-arm64.tar.gz`
          - **Windows AMD64**: `flowspec-cli-${{ env.VERSION }}-windows-amd64.tar.gz`
          
          ### 🚀 安装方法
          
          #### 使用 go install
          ```bash
          go install github.com/flowspec/flowspec-cli/cmd/flowspec-cli@v${{ env.VERSION }}
          ```
          
          #### 下载二进制文件
          1. 下载适合您平台的压缩包
          2. 解压到您的 PATH 目录
          3. 运行 `flowspec-cli --version` 验证安装
          
          ### 📋 变更日志
          
          详细的变更信息请查看 [CHANGELOG.md](https://github.com/flowspec/flowspec-cli/blob/v${{ env.VERSION }}/CHANGELOG.md)。
          
          ### 🐛 问题报告
          
          如果您遇到问题，请在 [Issues](https://github.com/flowspec/flowspec-cli/issues) 中报告。
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      run: |
        cd build/packages
        for file in *.tar.gz checksums.txt; do
          echo "Uploading $file..."
          curl \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$file" \
            "${{ steps.create_release.outputs.upload_url }}?name=$file"
        done
    
    - name: Update README badges
      if: success()
      run: |
        echo "✅ Release v${{ env.VERSION }} created successfully!"
        echo "📦 Assets uploaded to GitHub Release"
        echo "🔗 Release URL: ${{ steps.create_release.outputs.html_url }}"